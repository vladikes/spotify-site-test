"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _sauceConnectLauncher = _interopRequireDefault(require("sauce-connect-launcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SauceLauncher {
  /**
   * modify config and launch sauce connect
   */
  onPrepare(config, capabilities) {
    if (!config.sauceConnect) {
      return;
    }

    this.sauceConnectOpts = Object.assign({
      username: config.user,
      accessKey: config.key
    }, config.sauceConnectOpts);
    config.protocol = 'http';
    config.hostname = 'localhost';
    config.port = this.sauceConnectOpts.port || 4445;
    const sauceConnectTunnelIdentifier = this.sauceConnectOpts.tunnelIdentifier;

    if (sauceConnectTunnelIdentifier) {
      if (Array.isArray(capabilities)) {
        capabilities.forEach(capability => {
          capability.tunnelIdentifier = capability.tunnelIdentifier || sauceConnectTunnelIdentifier;
        });
      } else {
        Object.keys(capabilities).forEach(browser => {
          capabilities[browser].capabilities.tunnelIdentifier = capabilities[browser].capabilities.tunnelIdentifier || sauceConnectTunnelIdentifier;
        });
      }
    }

    return new Promise((resolve, reject) => (0, _sauceConnectLauncher.default)(this.sauceConnectOpts, (err, sauceConnectProcess) => {
      /* istanbul ignore if */
      if (err) {
        return reject(err);
      }

      this.sauceConnectProcess = sauceConnectProcess;
      return resolve();
    }));
  }
  /**
   * shut down sauce connect
   */


  onComplete() {
    if (!this.sauceConnectProcess) {
      return;
    }

    return new Promise(resolve => this.sauceConnectProcess.close(resolve));
  }

}

exports.default = SauceLauncher;